------------------------------------------------------------------------------------------------
-- File: test_grid_search.sql_in
-- Unit test for grid_search module
-------------------------------------------------------------------------------------------------
-- set up test data
CREATE TEMP TABLE test_grid_search(pid int, points double precision[]);

COPY test_grid_search (pid, points) FROM stdin DELIMITER '|';
1 | {14.23, 1.71, 2.43, 15.6, 127, 2.8, 3.0600, 0.2800, 2.29, 5.64, 1.04, 3.92, 1065}
2 | {13.2, 1.78, 2.14, 11.2, 1, 2.65, 2.76, 0.26, 1.28, 4.38, 1.05, 3.49, 1050}
3 | {13.16, 2.36,  2.67, 18.6, 101, 2.8,  3.24, 0.3, 2.81, 5.6799, 1.03, 3.17, 1185}
4 | {14.37, 1.95, 2.5, 16.8, 113, 3.85, 3.49, 0.24, 2.18, 7.8, 0.86, 3.45, 1480}
5 | {13.24, 2.59, 2.87, 21, 118, 2.8, 2.69, 0.39, 1.82, 4.32, 1.04, 2.93, 735}
6 | {14.2, 1.76, 2.45, 15.2, 112, 3.27, 3.39, 0.34, 1.97, 6.75, 1.05, 2.85, 1450}
7 | {14.39, 1.87, 2.45, 14.6, 96, 2.5, 2.52, 0.3, 1.98, 5.25, 1.02, 3.58, 1290}
8 | {14.06, 2.15, 2.61, 17.6, 121, 2.6, 2.51, 0.31, 1.25, 5.05, 1.06, 3.58, 1295}
9 | {14.83, 1.64, 2.17, 14, 97, 2.8, 2.98, 0.29, 1.98, 5.2, 1.08, 2.85, 1045}
10 | {13.86, 1.35, 2.27, 16, 98, 2.98, 3.15, 0.22, 1.8500, 7.2199, 1.01, 3.55, 1045}
\.

-- set k values to try 
\set input_k_values array[1,2,3]


/*=================================================================
*   test grid search for kmeans++ seeding
==================================================================*/

-- case 1: all parameters given
drop table if exists test_output;

select assert(
    PDLTOOLS_SCHEMA.gs_kmeanspp(
        'pid'
        ,'test_output'
        ,:input_k_values
        ,'test_grid_search'
        ,'points'
        ,'madlib.squared_dist_norm2'
        ,'madlib.avg'
        ,30
        ,0.001
        ,1.0
    ),
    'Model parameters written to test_output table'
);

-- k values in resulting table should be equal to input_k_values
select assert(array_to_string(k_values,','), array_to_string(:input_k_values,','))
from (
    select array_agg(num_clusters order by num_clusters) as k_values
    from test_output
) t1;

-- number of rows in resulting table should be equal to length of input k array
select assert(rowcnt,array_upper(:input_k_values,1))
from (
    select count(*) as rowcnt 
    from test_output
) t1;

-- case 2: all parameters but seeding_sample_ratio, min_frax_reassigned, and max_num_iterations given
drop table if exists test_output;

select assert(
    PDLTOOLS_SCHEMA.gs_kmeanspp(
        'pid'
        ,'test_output'
        ,ARRAY[1,2,3]
        ,'test_grid_search'
        ,'points'
        ,'madlib.squared_dist_norm2'
        ),
    'Model parameters written to test_output table'
);

-- k values in resulting table should be equal to input_k_values
select assert(array_to_string(k_values,','), array_to_string(:input_k_values,','))
from (
    select array_agg(num_clusters order by num_clusters) as k_values
    from test_output
) t1;

-- number of rows in resulting table should be equal to length of input k array
select assert(rowcnt,array_upper(:input_k_values,1))
from (
    select count(*) as rowcnt 
    from test_output
) t1;


/*=================================================================
*   test grid search for kmeans random seeding
==================================================================*/
-- set k values to try 
\set input_k_values array[3,4,5]

-- case 1: all parameters given
drop table if exists test_output;

select assert(
    PDLTOOLS_SCHEMA.gs_kmeans_random(
        'pid'
        ,'test_output'
        ,:input_k_values
        ,'test_grid_search'
        ,'points'
        ,'madlib.squared_dist_norm2'
        ,'madlib.avg'
        ,30
        ,0.001
    ),
    'Model parameters written to test_output table'
);

-- k values in resulting table should be equal to input_k_values
select assert(array_to_string(k_values,','), array_to_string(:input_k_values,','))
from (
    select array_agg(num_clusters order by num_clusters) as k_values
    from test_output
) t1;

-- number of rows in resulting table should be equal to length of input k array
select assert(rowcnt,array_upper(:input_k_values,1))
from (
    select count(*) as rowcnt 
    from test_output
) t1;

-- case 2: all parameters but seeding_sample_ratio, min_frax_reassigned, and max_num_iterations given
drop table if exists test_output;

select assert(
    PDLTOOLS_SCHEMA.gs_kmeans_random(
        'pid'
        ,'test_output'
        ,:input_k_values
        ,'test_grid_search'
        ,'points'
        ,'madlib.squared_dist_norm2'
        ),
    'Model parameters written to test_output table'
);

-- k values in resulting table should be equal to input_k_values
select assert(array_to_string(k_values,','), array_to_string(:input_k_values,','))
from (
    select array_agg(num_clusters order by num_clusters) as k_values
    from test_output
) t1;

-- number of rows in resulting table should be equal to length of input k array
select assert(rowcnt,array_upper(:input_k_values,1))
from (
    select count(*) as rowcnt 
    from test_output
) t1;


/*=================================================================
*   test grid search for kmeans++ seeding
==================================================================*/
-- set up test data 
DROP TABLE IF EXISTS houses_sample;
CREATE TABLE houses_sample ( id INT,
                      tax INT,
                      bedroom INT,
                      bath FLOAT,
                      price INT,
                      size INT,
                      lot INT
                    );
COPY houses_sample FROM STDIN WITH DELIMITER '|';
  1 |  590 |       2 |    1 |  50000 |  770 | 22100
  2 | 1050 |       3 |    2 |  85000 | 1410 | 12000
  3 |   20 |       3 |    1 |  22500 | 1060 |  3500
  4 |  870 |       2 |    2 |  90000 | 1300 | 17500
  5 | 1320 |       3 |    2 | 133000 | 1500 | 30000
  6 | 1350 |       2 |    1 |  90500 |  820 | 25700
  7 | 2790 |       3 |  2.5 | 260000 | 2130 | 25000
  8 |  680 |       2 |    1 | 142500 | 1170 | 22000
  9 | 1840 |       3 |    2 | 160000 | 1500 | 19000
 10 | 3680 |       4 |    2 | 240000 | 2790 | 20000
 11 | 1660 |       3 |    1 |  87000 | 1030 | 17500
 12 | 1620 |       3 |    2 | 118600 | 1250 | 20000
 13 | 3100 |       3 |    2 | 140000 | 1760 | 38000
 14 | 2070 |       2 |    3 | 148000 | 1550 | 14000
 15 |  650 |       3 |  1.5 |  65000 | 1450 | 12000
\.


-- test function
select assert(
    PDLTOOLS_SCHEMA.gs_elasticnet_cv(
        'houses_sample',
        'houses_en',
        'price',
        'array[tax, bath, size]',
        'gaussian',
        ARRAY[0.05, 0.20], -- alphas
        ARRAY[0.05, 0.20], -- lambdas
        'id',
        'elastic_net_mdls',
        2,
        TRUE,
        'fista'
    ),
    'Grid search results written to houses_en'
);



/*=================================================================
*   test LDA grid search 
==================================================================*/
-- Prepare a training dataset for LDA


drop table if exists PDLTOOLS_SCHEMA.documents;

CREATE TABLE PDLTOOLS_SCHEMA.documents(docid INT4, contents TEXT);
INSERT INTO PDLTOOLS_SCHEMA.documents VALUES
(0, 'Statistical topic models are a class of Bayesian latent variable models, originally developed for analyzing the semantic content of large document corpora.'),
(1, 'By the late 1960s, the balance between pitching and hitting had swung in favor of the pitchers. In 1968 Carl Yastrzemski won the American League batting title with an average of just .301, the lowest in history.'),
(2, 'Machine learning is closely related to and often overlaps with computational statistics; a discipline that also specializes in prediction-making. It has strong ties to mathematical optimization, which deliver methods, theory and application domains to the field.'),
(3, 'California''s diverse geography ranges from the Sierra Nevada in the east to the Pacific Coast in the west, from the Redwoodâ€“Douglas fir forests of the northwest, to the Mojave Desert areas in the southeast. The center of the state is dominated by the Central Valley, a major agricultural area. ');

-- Build a word count table by extracting the words and building a histogram for each document using the madlib's term_frequency function

-- Convert a string to a list of words
ALTER TABLE documents ADD COLUMN words TEXT[];
UPDATE documents SET words = regexp_split_to_array(lower(contents), E'[\\s+\\.\\,]');

-- Create the term frequency table
DROP TABLE IF EXISTS PDLTOOLS_SCHEMA.docs_training;
SELECT madlib.term_frequency('documents', 'docid', 'words', 'lda_input_training', TRUE);
SELECT * FROM lda_input_training order by docid limit 20;

-- Invoke the grid search

select assert(
        lda_gridsearch(
            ARRAY[0.05, 0.10, 0.20], --alphas (smaller the value, sparser the distribution
            ARRAY[0.05, 0.10, 0.20], --betas (smaller the value, sparser the distribution
            ARRAY[60, 40, 20], -- num_topics array,
            'lda_input_training', -- LDA input table
            'lda_mdl', -- LDA model table
            '_lda_gridsearch_results' --output table
        ),'Grid search results written to _lda_gridsearch_results');



select assert ( 
       








