-- File: test_sampling.sql
-- Unit test for stratified sampling utility.

CREATE TABLE base_table AS SELECT x val1, 2*x val2, (x*x)%3 stratum
         FROM generate_series(1,20) x
       DISTRIBUTED BY (val1);

SELECT strat_partition('base_table','labeled_table',
                'val1,val2', 'stratum','label',ARRAY[0.1,0.4,0.01]);

SELECT strat_sampling('base_table','sampled_table',
                'val1,val2', 'stratum',0.5);

SELECT strat_partition('base_table','labeled_nonstrat_table',
                'val1,val2', NULL,'label',ARRAY[0.1,0.4,0.01]);

SELECT strat_sampling('base_table','sampled_nonstrat_table',
                'val1,val2', NULL,0.5);

CREATE TABLE labeled_count AS
  SELECT stratum,label, count(*) cnt FROM labeled_table GROUP BY stratum,label
DISTRIBUTED RANDOMLY;

CREATE TABLE sampled_count AS
  SELECT stratum, count(*) cnt FROM sampled_table GROUP BY stratum
DISTRIBUTED RANDOMLY;

CREATE TABLE labeled_nonstrat_count AS
  SELECT label, count(*) cnt FROM labeled_nonstrat_table GROUP BY label
DISTRIBUTED RANDOMLY;

CREATE TABLE sampled_nonstrat_count AS
  SELECT count(*) cnt FROM sampled_nonstrat_table
DISTRIBUTED RANDOMLY;

SELECT assert(CASE
  WHEN (stratum=0 AND label=0) THEN '1'
  WHEN (stratum=0 AND label=1) THEN '2'
  WHEN (stratum=0 AND label=2) THEN '1'
  WHEN (stratum=0 AND label=3) THEN '2'
  WHEN (stratum=1 AND label=0) THEN '2'
  WHEN (stratum=1 AND label=1) THEN '5'
  WHEN (stratum=1 AND label=2) THEN '1'
  WHEN (stratum=1 AND label=3) THEN '6'
ELSE '0' END,cnt::TEXT) FROM labeled_count;

SELECT assert(CASE
  WHEN stratum=0 THEN '3'
  WHEN stratum=1 THEN '7'
ELSE '0' END,cnt::TEXT) FROM sampled_count;

SELECT assert(CASE
  WHEN label=0 THEN '2'
  WHEN label=1 THEN '8'
  WHEN label=2 THEN '1'
  WHEN label=3 THEN '9'
ELSE '0' END,cnt::TEXT) FROM labeled_nonstrat_count;

SELECT assert('10',cnt::TEXT) FROM sampled_nonstrat_count;

DROP TABLE base_table, labeled_table, sampled_table, labeled_count,
           sampled_count, labeled_nonstrat_count, sampled_nonstrat_count;


--Unit Test for the test_train_split function
--Create sample data
drop table if exists sample_data;
CREATE TEMP TABLE sample_data(pid int, points double precision[]);

COPY sample_data (pid, points) FROM stdin DELIMITER '|';
1 | {14.23, 1.71, 2.43, 15.6, 127, 2.8, 3.0600, 0.2800, 2.29, 5.64, 1.04, 3.92, 1065}
2 | {13.2, 1.78, 2.14, 11.2, 1, 2.65, 2.76, 0.26, 1.28, 4.38, 1.05, 3.49, 1050}
3 | {13.16, 2.36,  2.67, 18.6, 101, 2.8,  3.24, 0.3, 2.81, 5.6799, 1.03, 3.17, 1185}
4 | {14.37, 1.95, 2.5, 16.8, 113, 3.85, 3.49, 0.24, 2.18, 7.8, 0.86, 3.45, 1480}
5 | {13.24, 2.59, 2.87, 21, 118, 2.8, 2.69, 0.39, 1.82, 4.32, 1.04, 2.93, 735}
6 | {14.2, 1.76, 2.45, 15.2, 112, 3.27, 3.39, 0.34, 1.97, 6.75, 1.05, 2.85, 1450}
7 | {14.39, 1.87, 2.45, 14.6, 96, 2.5, 2.52, 0.3, 1.98, 5.25, 1.02, 3.58, 1290}
8 | {14.06, 2.15, 2.61, 17.6, 121, 2.6, 2.51, 0.31, 1.25, 5.05, 1.06, 3.58, 1295}
9 | {14.83, 1.64, 2.17, 14, 97, 2.8, 2.98, 0.29, 1.98, 5.2, 1.08, 2.85, 1045}
10 | {13.86, 1.35, 2.27, 16, 98, 2.98, 3.15, 0.22, 1.8500, 7.2199, 1.01, 3.55, 1045}
\.

--use the function to create test and train tables
select train_test_split('sample_data', 'pid' , 0.7);

--Check count in train table   
select assert(count_train, 7)
from (
    select count(*) as count_train
    from sample_data_train
)t1
;

--Check count in test table   
select assert(count_test, 3)
from (
    select count(*) as count_test
    from sample_data_test
)t1
;

--Check whether the test and train tables are disjoint   
select assert(cnt, 0)
from (
    select count(*) cnt
    from  sample_data_train
    inner join sample_data_test
    using(pid)
)t1
; 

